AWSTemplateFormatVersion: '2010-09-09'
Description:
  Lambda Create
# ------------------------------------------------------------#
#  Metadata
# ------------------------------------------------------------#
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Lambda Configuration"
        Parameters:
        - FunctionName
        - Description
        - Handler
        - MemorySize
        - Runtime
        - Timeout

# ------------------------------------------------------------#
#  InputParameters
# ------------------------------------------------------------#
Parameters:
  FunctionName:
    Type: String
    Default: "cfn-lmd-inamura"
  Description:
    Type: String
    Default: "cfn-lmd-inamura"
  Handler:
    Type: String
    Default: "index.lambda_handler"
  MemorySize:
    Type: String
    Default: "128"
  Runtime:
    Type: String
    Default: "python3.9"
  Timeout:
    Type: String
    Default: "180"

# ------------------------------------------------------------#
#  Resources
# ------------------------------------------------------------#
Resources:
# ------------------------------------------------------------#
#  Lambda
# ------------------------------------------------------------#
  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          #Python3.9
          #
          #特定のタグを含むRDSを停止する
          #
          #Lambda環境変数で以下を設定しています
          #   KEY        : タグキー文字列
          #   VALUE      : タグの値
          #   KEY と VALUE をタグづけください
          #

          import boto3
          import os
          import time
          rds = boto3.client('rds')
          KEY = os.environ['KEY']
          VALUE = os.environ['VALUE']

          def lambda_handler(event, context):
              time.sleep(180)
              dbs = rds.describe_db_instances()
              for db in dbs['DBInstances']:
                  #Check if DB instance is not already stopped
                  if (db['DBInstanceStatus'] == 'available'):
                      DoNotStop=1
                      try:
                          GetTags=rds.list_tags_for_resource(ResourceName=db['DBInstanceArn'])['TagList']
                          for tags in GetTags:
                              if(tags['Key'] == str(KEY) and tags['Value'] == str(VALUE)):
                                  result = rds.stop_db_instance(DBInstanceIdentifier=db['DBInstanceIdentifier'])
                                  print ("Stopping instance: {0}.".format(db['DBInstanceIdentifier']))
                          if(DoNotStop == 1):
                              DoNotStop=1
                      except Exception as e:
                          print ("Cannot stop instance {0}.".format(db['DBInstanceIdentifier']))
                          print(e)
                          
          if __name__ == "__main__":
              lambda_handler(None, None)


      Description: !Ref Description
      FunctionName: !Ref FunctionName
      Handler: !Ref Handler 
      MemorySize: !Ref MemorySize
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
      Environment:
        Variables:
          KEY: AutoStop
          VALUE: true
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${FunctionName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${FunctionName}-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "rds:DescribeDBInstances"
                  - "rds:StopDBInstance"
                  - "rds:AddTagsToResource"
                  - "rds:ListTagsForResource"
                  - "states:StartExecution"
                Resource: "*"

# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#                
Outputs:
  LambdaArn:
    Value: !GetAtt Lambda.Arn
    Export:
      Name: !Sub "${FunctionName}-arn"